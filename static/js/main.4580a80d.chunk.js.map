{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["Form","props","react_default","a","createElement","onSubmit","submit","type","placeholder","value","onChange","change","Result","_props$results","results","city","temp","pressure","sunrise","sunset","time","wind","err","content","sunRise","Date","toLocaleTimeString","sunSet","Fragment","concat","APIKey","App","state","handleInputChange","e","_this","setState","target","handleFormSubmit","preventDefault","API","fetch","then","response","ok","Error","json","data","date","toLocaleString","prevState","sys","Math","round","main","speed","toUpperCase","catch","className","components_Form","this","components_Result","id","href","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.4580a80d.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props => (\r\n\r\n    <form onSubmit={props.submit}>\r\n    <input \r\n    type=\"text\" \r\n    placeholder=\"Wpisz miasto..\"\r\n    value = {props.value}\r\n    onChange = {props.change}\r\n    />\r\n    <button>Sprawdź</button>\r\n    </form>\r\n    \r\n)\r\nexport default Form","import React from 'react';\r\n\r\nconst Result = props => {\r\n    const {city, temp, pressure, sunrise, sunset, time, wind, err} = props.results;\r\n\r\n    let content = null;\r\n\r\n    \r\n\r\n    if (!err && city) {\r\n        const sunRise = new Date(sunrise * 1000).toLocaleTimeString();\r\n        const sunSet = new Date(sunset * 1000).toLocaleTimeString();\r\n        content = (\r\n        <>\r\n        <h2>Pogoda dla miasta: </h2>\r\n        <h3>{city}</h3>\r\n        <p>Na dzień i godzinę: {time}</p>\r\n        <p>Temperatura: {temp} &deg;C</p>\r\n        <p>Ciśnienie: {pressure} hPa</p>\r\n        <p>Prędkość wiatru: {wind} m/s</p>\r\n        <p>Wschód słońca: {sunRise}</p>\r\n        <p>Zachód słońca: {sunSet}</p>\r\n        </>\r\n        )\r\n    }\r\n    return (\r\n    <>\r\n    \r\n    {err? `Podanego miasta ${city} nie ma w bazie danych` : content}\r\n    \r\n    </>\r\n    )\r\n}\r\n\r\nexport default Result","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Form';\nimport Result from './Result'\n\nconst APIKey = \"30ea146af1fd481aaa7a726166fc4a0b\";\n\nclass App extends Component {\n\n  state = {\n    value: '',\n    time: '',\n    sunrise: '',\n    sunset: '',\n    temp: '',\n    pressure: '',\n    wind: '',\n    city: '',\n    err: false\n  }\n\n  handleInputChange = e => (\n    this.setState({\n      value: e.target.value\n    })\n  )\n  handleFormSubmit = e => {\n    e.preventDefault()\n    const API = `http://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&appid=${APIKey}&units=metric`;\n    fetch(API)\n    .then(response => {\n      if(response.ok){\n        return response \n      }\n      throw Error (\"Nie powiodło się\")\n    })\n    .then(response => response.json())\n    .then(data => {\n      const date = new Date().toLocaleString();\n      this.setState(prevState => ({\n        err:false,\n        time: date,\n        sunrise: data.sys.sunrise,\n        sunset: data.sys.sunset,\n        temp: Math.round(data.main.temp),\n        pressure: data.main.pressure,\n        wind: data.wind.speed,\n        city: prevState.value.toUpperCase(),\n        value: ''\n      }))\n    })\n    .catch(err => {\n      this.setState(prevState => ({\n        err: true,\n        city: prevState.value,\n        value: \"\"\n      }))\n    })\n  }\n  render() {\n    return (\n      <>\n      <div className=\"app\">\n      <h1>Sprawdź pogodę na dziś!</h1>\n      <Form value={this.state.value} change={this.handleInputChange} submit={this.handleFormSubmit}/>\n      <Result results={this.state}/>\n      </div>\n      <span id='photo'>Photo by <a href=\"https://unsplash.com/@goldcircuits?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Stacey Gabrielle Koenitz Rozells</a> on <a href=\"https://unsplash.com/images/nature/cloud?utm_source=unsplash&amp;utm_medium=referral&amp;utm_content=creditCopyText\">Unsplash</a></span>\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}